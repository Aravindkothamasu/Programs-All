
""""""
# Video 18
# smoothing or bluring
# All these are linear filer
# homogenious filer -> All pixel contain equal weight ....kernel k = 1/(width of the kernel * Height of the kernel )

# Low pass filter helps -> removing noices,buring the images
# high pass filters -> Finding the edges in the images , Finding the ages
# Gaussian filter  -> same as homogenous filter ,but the each pixel has diff weight among each other
#                   |->  center has heiger weight but as long we go boundaries ,weight got decrease's
#                   |-> Mainly to remove high freq noise

# Median Filter  ->  something that rplace each pixel's value with the median of its neighboring pxels
#               |-> this method dealing with "salt anf pepper noise

# Bi-lateral Filter -> Noise removal ,while keeping the edge sharp


"""
Homogenous filter -> each has equal weight  |
------------------                          |
| 1 1 1 1 1 |                               |
| 1 1 1 1 1 |                               |
| 1 1 1 1 1 |
| 1 1 1 1 1 |
| 1 1 1 1 1 |
------------------
"""


import cv2
import numpy as np
from matplotlib import pyplot as plt

img = cv2.imread('lena.jpg')
img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)                   #matplotlib gives BGR

kernel = np.ones((5,5),np.float32)/25                       # formula 1/5*5 = 1/25
dst = cv2.filter2D(img, -1,kernel)                          # to blur the image , smoothen the edges ------- Homogenous
blur = cv2.blur(img,(5,5))                                  #
gblur = cv2.GaussianBlur(img,(5,5),0)                       # Gaussian filter
median= cv2.medianBlur(img,5)                           # kernel size should be odd value except 1
bilat= cv2.bilateralFilter(img,9,75,75)

titles =['image','2D Convolution','blur','gblur','median','bilaterial']
images = [img,dst,blur,gblur,median,bilat]

for i in range(6):
    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])
plt.show()







"""
#video 17
#morphology techiniques

import cv2
import numpy as np
from matplotlib import pyplot as plt


img = cv2.imread('smarties.png',cv2.IMREAD_GRAYSCALE)
_, mask = cv2.threshold(img, 220, 255,cv2.THRESH_BINARY_INV)
kernal = np.ones((5,5),np.uint8)                                    # For setting the ones or zeros in our image

dilation = cv2.dilate(mask,kernal,iterations=2)                     # improves the binary image,for clarification (ardham kaka pothey ,run chesi chudu
erosion = cv2.erode(mask,kernal, iterations=1)                      # removes the upper layer of the base image
opening = cv2.morphologyEx(mask, cv2.MORPH_OPEN,kernal)             # erosion followed by dilation (Applies the erosion on the base image ,after that dilation performs
closing = cv2.morphologyEx(mask, cv2.MORPH_CLOSE,kernal)
mg = cv2.morphologyEx(mask, cv2.MORPH_GRADIENT,kernal)
th = cv2.morphologyEx(mask, cv2.MORPH_TOPHAT,kernal)

titles = ['image','mask','dilation','erosion','opening','closing','mg','th']
images = [img,mask,dilation,erosion,opening,closing,mg,th]

for i in range(8):
    plt.subplot(2,4,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])

plt.show()
"""





"""
#video 16
#matplotlib used for ploting techinique 
#to display multiple plots at the same image
import cv2
from matplotlib import pyplot as plt

img = cv2.imread('gradient.png',-1)
_,th1 = cv2.threshold(img,  50, 255, cv2.THRESH_BINARY)
_,th2 = cv2.threshold(img, 200, 255, cv2.THRESH_BINARY_INV)
_,th3 = cv2.threshold(img, 127, 255, cv2.THRESH_TRUNC)
_,th4 = cv2.threshold(img, 50, 255, cv2.THRESH_TOZERO)
_,th5 = cv2.threshold(img, 50, 255, cv2.THRESH_TOZERO_INV)


titles = ['Original Image','Binary','Binary_inv','Trunc','Tozero','tozero_inv']
images = [img,th1,th2,th3,th4,th5]


for i in range(6):
    plt.subplot(2,3,i+1),plt.imshow(images[i],'gray')
    plt.title(titles[i])
    plt.xticks([]),plt.yticks([])

#cv2.imshow('image',img)
#img = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)
#plt.imshow(img)
plt.show()

#cv2.waitKey(0)
#cv2.destroyAllWindows()


"""


"""
#Video 15
#adapative threshold techinique

import cv2
import numpy as np

img = cv2.imread('sudoku.png',0)
_,th1 = cv2.threshold(img,127,255,cv2.THRESH_BINARY)

th2 = cv2.adaptiveThreshold(img, 255,cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2);
th3 = cv2.adaptiveThreshold(img, 255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY,11,2);

cv2.imshow('imgg',img)
cv2.imshow('image',th1)
cv2.imshow('imaa',th2)
cv2.imshow('ime',th3)


cv2.waitKey(0)
cv2.destroyAllWindows()


"""

"""
#Video 14 
#thresolding techiniques

import cv2
import numpy as np

img = cv2.imread('gradient.png',0)
_,th1 = cv2.threshold(img, 127,255,cv2.THRESH_TOZERO_INV)

cv2.imshow('image',img)
cv2.imshow('th1',th1)

cv2.waitKey(0)
cv2.destroyAllWindows()


"""
"""
#video 13
#HSV for works on video

import cv2
import numpy as np

def nothing():
    pass

cap =cv2.VideoCapture(0);
cv2.namedWindow("Tracking")
cv2.createTrackbar("LH" ,"Tracking" ,0 ,255 ,nothing)
cv2.createTrackbar("LS" ,"Tracking" ,0 ,255 ,nothing)
cv2.createTrackbar("LV" ,"Tracking" ,0 ,255 ,nothing)
cv2.createTrackbar("UH" ,"Tracking" ,255 ,255 ,nothing)
cv2.createTrackbar("US" ,"Tracking" ,255 ,255 ,nothing)
cv2.createTrackbar("UV" ,"Tracking" ,255 ,255 ,nothing)



while True:
#    frame = cv2.imread('smarties.png')
    _, frame = cap.read()
    hsv = cv2.cvtColor(frame ,cv2.COLOR_BGR2HSV)

    l_h = cv2.getTrackbarPos("LH", "Tracking")
    l_s = cv2.getTrackbarPos("LS", "Tracking")
    l_v = cv2.getTrackbarPos("LV", "Tracking")

    u_h = cv2.getTrackbarPos("UH", "Tracking")
    u_s = cv2.getTrackbarPos("US", "Tracking")
    u_v = cv2.getTrackbarPos("UV", "Tracking")

    l_b = np.array( [l_h ,l_s ,l_v]  )
    u_b = np.array( [u_h ,u_s ,u_v]  )

    mask = cv2.inRange(hsv ,l_b ,u_b)
    res = cv2.bitwise_and(frame ,frame ,mask=mask)

    cv2.imshow("frame" ,frame)
    cv2.imshow("mask" ,mask)
    cv2.imshow("res" ,res)

    key = cv2.waitKey(1)
    if key == 27:
        break
cap.release()
cv2.destroyAllWindows()
"""





"""
#video 13 HSV
#picture 
import cv2
import numpy as np

def nothing():
    pass

cv2.namedWindow("Tracking")
cv2.createTrackbar("LH","Tracking",0,255,nothing)
cv2.createTrackbar("LS","Tracking",0,255,nothing)
cv2.createTrackbar("LV","Tracking",0,255,nothing)
cv2.createTrackbar("UH","Tracking",255,255,nothing)
cv2.createTrackbar("US","Tracking",255,255,nothing)
cv2.createTrackbar("UV","Tracking",255,255,nothing)



while True:
    frame = cv2.imread('smarties.png')
    hsv = cv2.cvtColor(frame,cv2.COLOR_BGR2HSV)

    l_h = cv2.getTrackbarPos("LH", "Tracking")
    l_s = cv2.getTrackbarPos("LS", "Tracking")
    l_v = cv2.getTrackbarPos("LV", "Tracking")

    u_h = cv2.getTrackbarPos("UH", "Tracking")
    u_s = cv2.getTrackbarPos("US", "Tracking")
    u_v = cv2.getTrackbarPos("UV", "Tracking")

    l_b = np.array( [l_h,l_s,l_v]  )
    u_b = np.array( [u_h,u_s,u_v]  )
    
    mask = cv2.inRange(hsv,l_b,u_b)
    res = cv2.bitwise_and(frame,frame,mask=mask)

    cv2.imshow("frame",frame)
    cv2.imshow("mask",mask)
    cv2.imshow("res",res)

    key = cv2.waitKey(1)
    if key == 27:
        break
cv2.destroyAllWindows()

"""








"""
#video 12
#trackbar indication
import cv2
import numpy as np

def nothing(x):
    print(x)


img = np.zeros((300,512,3),np.uint8)
cv2.namedWindow('image')

cv2.createTrackbar('B','image',0,255,nothing)
cv2.createTrackbar('G','image',0,255,nothing)
cv2.createTrackbar('R','image',0,255,nothing)

switch = '0 : OFF\n 1:ON'
cv2.createTrackbar(switch,'image',0,1,nothing)

while (1):
    cv2.imshow('image',img)
    k = cv2.waitKey(1) & 0xff
    if k == 27:
        break
    b = cv2.getTrackbarPos('B','image')
    g = cv2.getTrackbarPos('G','image')
    r = cv2.getTrackbarPos('R','image')
    s = cv2.getTrackbarPos(switch,'image')
    if s == 0:
        img[:] = 0
    else:
        img[:] = [b,g,r]


cv2.destroyAllWindows()
"""


"""
#video 11
#bitwise ANd ,OR,XOR,NOT operations


import cv2
import numpy as np

img1 = np.zeros((255,500,3),np.uint8)
img1 = cv2.rectangle(img1,(200,0),(300,100),(255,255,255),-1)


img2 = np.zeros( (255,500,3),np.uint8)
img2 = cv2.rectangle(img2,(0,0),(245,250),(10,10,10),-1)
img2 = cv2.rectangle(img2,(0,0),(255,500),(255,255,255),-1)

cv2.imwrite('erripuk.png',img2)

#bitOr = cv2.bitwise_or(img2,img1)
#bitAnd= cv2.bitwise_and(img2,img1)
#bitXor = cv2.bitwise_xor(img1,img2)
bitNt = cv2.bitwise_not(img1)


cv2.imshow("img1",img1)
cv2.imshow("img2",img2)
#cv2.imshow('bitand',bitAnd)
#cv2.imshow('itOR',bitOr)
cv2.imshow('Xor',bitNt)

cv2.waitKey(0)
cv2.destroyAllWindows()
"""

"""
#video 10
#split,merge,resize
import cv2
import numpy as np

img = cv2.imread('messi5.jpg')

print(img.shape)
print(img.size)
print(img.dtype)
b,g,r = cv2.split(img)
img = cv2.merge((b,g,r))

cv2.imshow('image',img)
cv2.waitKey(0)
cv2.destroyAllWindows()

"""



"""
#Video 9
#if mouse clicks draw a circle
import cv2
import numpy as np

def click_event (event,x,y,flags,param):
    if event == cv2.EVENT_LBUTTONDOWN:
        blue = img[x,y,0]
        green = img[x,y,1]
        red = img[x,y,2]
        cv2.circle(img,(x,y),3,(0,0,255),-1)
        mycolorImage = np.zeros((512,512,3),np.uint8)
        mycolorImage[:] = [blue,green,red]
        cv2.imshow('color',mycolorImage)


def click_event(event,x,y,flags,param):
    if event == cv2.EVENT_FLAG_LBUTTON:
        cv2.circle(img,(x,y),3,(0,0,255),-1)
        points.append((x,y))
        if len(points) >= 2:
            cv2.line(img,points[-1],points[-2],(255,0,0),5)
        cv2.imshow('image',img)

img = np.zeros((512,512,4),np.uint8)
#img = cv2.imread('apple.jpg')
cv2.imshow('image',img)
points = []
cv2.setMouseCallback('image',click_event)

cv2.waitKey(0)
cv2.destroyAllWindows()


"""




""""
# draw graphical line
#video 7

import cv2
import datetime
cap = cv2.VideoCapture(0)

print(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
print(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

cap.set(3,720)
cap.set(4,650)

print(cap.get(3))
print(cap.get(4))

while (cap.isOpened()) :
    ret,frame = cap.read()
    if ret == True:
        font = cv2.FONT_HERSHEY_SIMPLEX
        text = 'Aravind Kothamasu'
        datet = str(datetime.datetime.now())
        frame = cv2.putText(frame, datet,(10,50),font,1,(100,50,0),1,cv2.LINE_AA)
        cv2.imshow('frame',frame)

        if cv2.waitKey(1)&0xff == ord('q') :
            break
    else:
        break

cap.release()
cv2.destroyAllWindows()

"""






"""
#video 6
import cv2

cap = cv2.VideoCapture(0)

print(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
print(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

cap.set(3, 750)
cap.set(4,750)

print(cap.get(3))
print(cap.get(4))

while (cap.isOpened()):
    ret,frame = cap.read()
    if ret == True :
        cv2.imshow('image',frame)
        if cv2.waitKey(1)& 0xff == ord('q') :
            break
    else :
        break

cap.release()
cv2.destroyAllWindows()

"""






"""
#video 5
import numpy as np
import cv2

#img = cv2.imread('apple.jpg',1)
# 0 - > black and white, 1-> color -1 -> ?
img = np.zeros([512,512,3],np.uint8)


img = cv2.line(img, (100,0),(605,500),(94,35,70),8)
img = cv2.arrowedLine(img,(1000,0),(255,255),(255,0,0),5)

img = cv2.rectangle(img,(184,100),(5,228),(0,255,0),-1 )
img = cv2.circle(img,(255,255),50,(0,255,0),-1)
font = cv2.FONT_HERSHEY_SIMPLEX
img = cv2.putText(img,'Aravind',(70,250),font,3,(0,50,150),5,cv2.LINE_AA)
# line function for
# (img->on photo)
# coordinates where to start
# ( BGR ) we are using blue 254
# thickness of line


cv2.imshow('images',  img)
cv2.waitKey(0)
cv2.destroyAllWindows()"""
